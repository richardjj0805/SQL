# Rank() VS Dense_Rank()

create table #Temp1(
ID int  NOT NULL IDENTITY(1, 1),
client_id int  NOT NULL ,
driver_id int  NOT NULL,
city_id int  NOT NULL ,
client_rating int  NOT NULL,
driver_rating int  NOT NULL,
request_at datetime,
predicted_eta int,
actual_eta int,
[status] varchar(255) 
)
insert into #Temp1(client_id,driver_id,city_id,client_rating,
driver_rating,request_at,predicted_eta,actual_eta,[status])
 values(1,1,1,1,1,'20181001 10:34:09 AM',5,10,'completed'),
(1,2,1,2,2,'20181002 10:34:09 AM',5,15,'cancelled'),
(1,3,1,3,3,'20181003 10:34:09 AM',5,6,'completed'),
(1,1,1,1,1,'20181001 10:34:09 AM',5,7,'completed'),
(1,2,1,2,2,'20181002 10:34:09 AM',5,8,'cancelled'),
(1,3,1,3,3,'20181003 10:34:09 AM',5,20,'completed'),
(4,5,4,5,5,'20171004 10:34:09 AM',5,7,'completed'),
(4,6,4,6,6,'20180705 10:34:09 AM',5,8,'completed'),
(4,7,4,7,7,'20180810 10:34:09 AM',5,9,'completed'),
(4,5,4,5,5,'20171004 10:34:09 AM',5,30,'completed'),
(4,6,4,6,6,'20180705 10:34:09 AM',5,20,'completed'),
(4,7,4,7,7,'20180810 10:34:09 AM',5,9,'completed')


 SELECT client_id,actual_eta-predicted_eta as [difference],
DENSE_RANK() OVER (PARTITION BY client_id order by actual_eta-predicted_eta) as rankDensePostion,
row_number() OVER (PARTITION BY client_id order by actual_eta-predicted_eta) as RowNumber
from #Temp1

# PERCENTILE_DISC vs PERCENTILE_CONT VS MIN/MAX/AVG
/**
The PERCENTILE_CONT function calculates a percentile based on a continuous distribution of the column’s value. 
The PERCENTILE_DISC function returns the column’s value for the smallest CUME_DIST value that is
greater than or equal to the specified percentile value. For the PERCENTILE_CONT function, 
the value returned may or may not exist in the column being analyzed; for the PERCENTILE_DISC 
function the value returned will belong to one of the rows in the partition.
*/

/**
CUME_DIST: calculates the cumulative distribution of a value within a group of values.
Assuming ascending ordering, the CUME_DIST of a value in row r is defined as the number
of rows with values less than or equal to that value in row r, divided by the number 
of rows evaluated in the partition or query result set. CUME_DIST is similar to the PERCENT_RANK function.
1>=CUME_DIST>0

PERCENT_RANK():Calculates the relative rank of a row within a group of rows
1>=CUME_DIST>=0
*/

/** 
LAG provides access to a row at a given physical offset that comes before the current row
LEAD provides access to a row at a given physical offset that follows the current row
Accesses data from a subsequent row in the same result set without the use of a self-join starting 
*/
create table #test (
    EmplId INT PRIMARY KEY CLUSTERED,
    DeptId INT,
    Salary NUMERIC(8,2));

INSERT INTO #test
VALUES (1, 1, 10000),
       (2, 1, 11000),
       (3, 1, 12000),
       (4, 2, 25000),
       (5, 2, 35000),
       (6, 2, 100000),
       (7, 2, 100000);
 
SELECT EmplId,
       DeptId,
       Salary,
       PctC1 = PERCENTILE_CONT(0.5)
               WITHIN GROUP (ORDER BY Salary ASC)
               OVER (PARTITION BY DeptId),
       PctD1 = PERCENTILE_DISC(0.5)
               WITHIN GROUP (ORDER BY Salary ASC)
               OVER (PARTITION BY DeptId),
       CD1   = CUME_DIST()
               OVER (PARTITION BY DeptId
                         ORDER BY Salary),
	   MAX1 = Max(Salary)
               OVER (PARTITION BY DeptId),
	   Min1 = Min(Salary)
               OVER (PARTITION BY DeptId),
       AVG1  = AVG(Salary)
               OVER (PARTITION BY DeptId),
       PctC2 = PERCENTILE_CONT(0.5)
               WITHIN GROUP (ORDER BY Salary ASC)
               OVER (),
       PctD2 = PERCENTILE_DISC(0.5)
               WITHIN GROUP (ORDER BY Salary ASC)
               OVER (),
       CD2   = CUME_DIST()
               OVER (ORDER BY Salary ASC),
       AVG2  = AVG(Salary)
               OVER (ORDER BY Salary
                      ROWS BETWEEN UNBOUNDED PRECEDING
                               AND UNBOUNDED FOLLOWING)
  FROM #test
 ORDER BY DeptId, EmplId;
